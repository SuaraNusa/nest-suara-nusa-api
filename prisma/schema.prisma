// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserGender {
  MAN
  WOMAN
}

model User {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  uniqueId                 String                     @unique @db.VarChar(512)
  name                     String                     @db.VarChar(255)
  email                    String                     @unique @db.VarChar(255)
  emailVerifiedAt          DateTime?                  @map("email_verified_at") @db.Timestamp()
  password                 String?                    @db.VarChar(512)
  photoPath                String?                    @map("photo_path") @db.VarChar(255)
  isExternal               Boolean                    @default(false) @map("is_external")
  OneTimePasswordToken     OneTimePasswordToken[]
  UserVerificationQuestion UserVerificationQuestion[]

  @@map("users")
}

model UserVerificationQuestion {
  userId                 BigInt               @map("user_id") @db.UnsignedBigInt
  User                   User                 @relation(fields: [userId], references: [id])
  verificationQuestionId Int                  @map("verification_question_id") @db.UnsignedInt
  VerificationQuestion   VerificationQuestion @relation(fields: [verificationQuestionId], references: [id])
  answer                 String               @db.VarChar(255)

  @@id([userId, verificationQuestionId])
  @@map("user_verification_questions")
}

model VerificationQuestion {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  question                 String                     @db.VarChar(255)
  UserVerificationQuestion UserVerificationQuestion[]

  @@map("verification_questions")
}

model OneTimePasswordToken {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  userId      BigInt   @map("user_id") @db.UnsignedBigInt
  User        User     @relation(fields: [userId], references: [id])
  hashedToken String   @map("hashed_token") @db.VarChar(255)
  expiresAt   DateTime @map("expires_at") @db.Timestamp()
  isValid     Boolean  @default(false) @map("is_valid")

  @@map("one_time_password_tokens")
}
